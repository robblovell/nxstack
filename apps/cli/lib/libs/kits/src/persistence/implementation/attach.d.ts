import { AppHelper, AttachRequest, DeploymentHelper } from '@provisioner/contracts';
import { Deployment } from '@c6o/kubeclient-resources/apps/v1';
import { persistenceBaseMixinType } from '../helper';
import { Resource, Result } from '@c6o/kubeclient-contracts';
export interface AttachPersistence {
    attachSimpleImplementation(request: AttachRequest): Promise<Result>;
    attachDestructiveImplementation(request: AttachRequest): Promise<Result>;
    addPVCToDeploymentVolumes(doc: Resource, volumeClaimName: string, mountPoint: string): Promise<Result>;
    addPVCToDeploymentVolumeMounts(doc: Resource, volumeClaimName: string, mountPoint: string): Promise<Result>;
    getPersistentVolumeClaimAndSetupAttach(request: AttachRequest): Promise<Array<any>>;
    getVolumeSnapshotAndSetupAttach(request: AttachRequest): Promise<Array<any>>;
    getPersistentVolumeAndSetupAttach(request: AttachRequest): Promise<AttachRequest>;
    getAppAndSetupAttach(request: AttachRequest): Promise<Array<any>>;
    validatePersistentVolumeClaim(persistentVolumeClaim: any, deployment: any): any;
    addOwnerReferenceToVolumeClaim(persistentVolumeClaim: any, deployment: any): any;
    setupAttach(request: AttachRequest): Promise<Array<any>>;
    createPersistentVolumeClaim(request: AttachRequest, owners?: Array<Resource>): any;
}
export declare const attachMixin: (base: persistenceBaseMixinType) => {
    new (): {
        attachSimpleImplementation(request: AttachRequest): Promise<Result>;
        attachDestructiveImplementation(request: AttachRequest): Promise<Result>;
        addVolumeToDeployment(doc: any, volumeClaimName: string, mountPoint: string): Promise<Result>;
        addPVCToDeploymentVolumeMounts(doc: Resource, volumeClaimName: string, mountPoint: string): Promise<Result>;
        addPVCToDeploymentVolumes(doc: Resource, volumeClaimName: string, mountPoint: string): Promise<Result>;
        getPersistentVolumeClaimAndSetupAttach(request: AttachRequest): Promise<Array<any>>;
        getVolumeSnapshotAndSetupAttach(request: AttachRequest): Promise<Array<any>>;
        getPersistentVolumeAndSetupAttach(request: AttachRequest): Promise<AttachRequest>;
        getAppAndSetupAttach(request: AttachRequest): Promise<Array<any>>;
        validatePersistentVolumeClaim(persistentVolumeClaim: any, deployment: any): Promise<void>;
        addOwnerReferenceToVolumeClaim(persistentVolumeClaim: any, deployment: any): Promise<void>;
        setupAttach(request: AttachRequest): Promise<Array<any>>;
        createPersistentVolumeClaim(request: AttachRequest, owners?: Array<Resource>): Promise<void>;
        cluster: import("../../../../../sharedlibs/kubeclient/packages/client/src").Cluster;
        attach(request: AttachRequest): Promise<Result>;
        detach(request: import("@provisioner/contracts").DetachRequest): Promise<Result>;
        delete(request: import("@provisioner/contracts").DeleteRequest): Promise<Result>;
        list(request: any): Promise<Result>;
        expand(request: import("@provisioner/contracts").ExpandRequest): Promise<Result>;
        expansionAllowed(request: import("@provisioner/contracts").ExpansionAllowedRequest): Promise<boolean>;
        patch(request: import("@provisioner/contracts").PatchRequest): Promise<Result>;
        snapshot(request: import("@provisioner/contracts").SnapshotRequest): Promise<Result>;
        snapshotAllowed(): Promise<boolean>;
        copy(persisentvolumeClaimName: string, namespace: string, appId: string, targetVolumeName: string): Promise<Result>;
        restore(volumeSnapshotName: string, namespace: string, appId: string, persisentvolumeClaimName: string): Promise<Result>;
        runWorker(workerFile: any, options: any): Promise<void>;
        getResource(name: any, kind: any, namespace: any, apiVersion: any): Promise<Resource>;
        getDeployment(namespace: any, appName: any): Promise<DeploymentHelper<Deployment>>;
        getPersistentVolume(volumeName: any): Promise<Resource>;
        getPersistentVolumeClaim(namespace: any, persistentVolumeClaimName: any): Promise<Resource>;
        getPersistentVolumeClaimFromMountPath(namespace: any, appName: any, mountPath: any): Promise<Resource>;
        getApplication(namespace: any, appName: any): Promise<AppHelper<import("@provisioner/contracts").AppResource>>;
    };
};
